@font-face {
    font-family: 'Inter';
    font-style: normal;
    font-weight: 500;
    font-display: block;
    src: url('assets/inter-500.woff2') format('woff2');
    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0300-0301, U+0303-0304, U+0308-0309, U+0323, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}

:root {
    --main-color: #fff;
    --text-color: #000;
    --highlight-color: #2727e6;
}

.dark-mode {
    --main-color: #000;
    --text-color: #fff;
    --highlight-color: #ff4141;
}

body {
    font-family: Inter, sans-serif;
    font-size: 24px;
    line-height: 1.66;
    color: var(--text-color);
}

section {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    min-height: 100svh;
    background: var(--main-color) url("assets/grid.svg") center;
    transition: transform 0.5s;
}

body.nav-open section {
    transform: translateX(-100px);
}

button,
a {
    color: var(--text-color);
}

a {
    text-decoration: none;
}

a:hover,
a:focus-visible {
    color: var(--highlight-color);
}

svg {
    vertical-align: middle;
}

h1,
.dark-mode-toggle,
.menu-toggle {
    position: fixed;
    --_offset: 32px;
    z-index: 1;
}

.dark-mode-toggle,
.menu-toggle {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    background: none;
    border: none;
    font-size: inherit;
}

h1 {
    top: var(--_offset);
    left: var(--_offset);
}

h1 rect {
    fill: var(--highlight-color);
}

.dark-mode-toggle {
    bottom: var(--_offset);
    left: var(--_offset);
}

.dark-mode-toggle rect {
    fill: var(--main-color);
    stroke: currentColor;
}

.dark-mode-toggle circle.toggle {
    transition: transform 0.2s;
    transform-origin: center;
    transform-box: fill-box;
}

.dark-mode-toggle:hover circle.toggle {
    transform: scale(1.3);
}

.dark-mode-toggle circle {
    fill: currentColor;
}

.menu-toggle {
    top: var(--_offset);
    right: var(--_offset);
}

.menu-toggle rect {
    fill: currentColor;
}

nav,
.nav-fake-mid,
.nav-fake-back {
    visibility: hidden;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    position: fixed;
    top: 0;
    right: 0;
    width: 100%;
    max-width: 600px;
    height: 100%;
    padding: 48px;
    background-color: var(--main-color);
    transform: translateX(100%);
    transition: transform 0.5s cubic-bezier(1, 0, 0, 1), visibility 0s 0.5s;
}

nav {
    border-left: 1px solid rgba(127, 127, 127, 0.3);
}

.nav-fake-mid {
    background-color: var(--highlight-color);
    transition-delay: 0.1s;
}

.nav-fake-back {
    background-color: var(--text-color);
    transition-delay: 0.2s;
}

body.nav-open nav,
body.nav-open .nav-fake-mid,
body.nav-open .nav-fake-back {
    visibility: visible;
    transform: translateX(0);
}

body.nav-open nav {
    transition-delay: 0.2s;
}

body.nav-open .nav-fake-back {
    transition-delay: 0s;
}

nav div {
    display: flex;
    flex-direction: column;
    justify-content: center;
}

nav div.internal-links {
    font-size: 48px;
    line-height: 1.33;
    flex-grow: 1;
}

.wipe {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    background-color: var(--highlight-color);
    z-index: 2;
    transition: background-color 0s 0.6s; /** This trick with delay is needed to make sure the background changes only after the gsap animation when switching dark / light mode. **/
}

svg.spiral {
    border: 2px solid var(--highlight-color);
}

svg.spiral g {
    transform-origin: center;
}

svg.spiral rect {
    stroke: var(--highlight-color);
    fill: var(--highlight-color);
    fill-opacity: 0;
    transition: fill-opacity 0.15s;
    transform-origin: center;
    transform-box: fill-box;
    --_translate: translate(-50%, -50%);
    transform: var(--_translate) rotate(0);
    animation: shape-animation 4s infinite cubic-bezier(0.46,0.03,0.52,0.96);
}

svg.spiral rect:hover {
    fill: var(--highlight-color);
    fill-opacity: 0.25;
}

@keyframes shape-animation {
    0% {
        transform: var(--_translate) rotate(0);
    }
    50% {
        transform: var(--_translate) rotate(90deg);
    }
    100% {
        transform: var(--_translate) rotate(90deg);
    }
}